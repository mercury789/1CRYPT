const fs = require('fs')
const path = require('path')

const imgRoot = './img'
const jsonRoot = './json'
const imgExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp', '.svg']

// –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π = —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∞–ø–æ–∫ –≤ ./img
function getCategories() {
  return fs.readdirSync(imgRoot).filter(folder => {
    const fullPath = path.join(imgRoot, folder)
    return fs.statSync(fullPath).isDirectory()
  })
}

// –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ ./img/<category>
function getImageNames(category) {
  const folderPath = path.join(imgRoot, category)
  const files = fs.readdirSync(folderPath)
  return files
    .filter(file => imgExtensions.includes(path.extname(file).toLowerCase()))
    .map(file => path.parse(file).name)
}

// –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–∞ –∏–∑ JSON ./json/<category>.json
function getJsonNames(category) {
  const jsonPath = path.join(jsonRoot, `${category}.json`)
  if (!fs.existsSync(jsonPath)) return null
  const data = fs.readFileSync(jsonPath, 'utf8')
  try {
    const arr = JSON.parse(data)
    if (!Array.isArray(arr)) return null
    return arr.map(obj => obj.name)
  } catch {
    return null
  }
}

// –Ω–∞–π—Ç–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
function findDuplicates(arr) {
  const seen = new Set()
  const dupes = new Set()
  for (const item of arr) {
    if (seen.has(item)) dupes.add(item)
    else seen.add(item)
  }
  return [...dupes]
}

// –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ö–æ–¥ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
function compareAll() {
  const categories = getCategories()
  if (!categories.length) {
    console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    return
  }

  for (const category of categories) {
    console.log(`\n--- –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category} ---`)

    const imgNames = getImageNames(category)
    const jsonNames = getJsonNames(category)

    if (jsonNames === null) {
      console.log(`‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON: ./json/${category}.json`)
      continue
    }

    console.log(`üñºÔ∏è  –ö–∞—Ä—Ç–∏–Ω–æ–∫: ${imgNames.length}`)
    console.log(`üìÑ JSON-–æ–±—ä–µ–∫—Ç–æ–≤: ${jsonNames.length}`)

    const imgDupes = findDuplicates(imgNames)
    const jsonDupes = findDuplicates(jsonNames)

    if (imgDupes.length) console.log('‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', imgDupes)
    if (jsonDupes.length) console.log('‚ö†Ô∏è  –î—É–±–ª–∏–∫–∞—Ç—ã –≤ JSON:', jsonDupes)

    const imgsNotInJson = imgNames.filter(name => !jsonNames.includes(name))
    const jsonNotInImgs = jsonNames.filter(name => !imgNames.includes(name))

    if (imgsNotInJson.length) console.log('üü• –ö–∞—Ä—Ç–∏–Ω–∫–∏ –±–µ–∑ json-–æ–ø–∏—Å–∞–Ω–∏—è:', imgsNotInJson)
    if (jsonNotInImgs.length) console.log('üü¶ JSON-–∏–º–µ–Ω–∞ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏:', jsonNotInImgs)
    if (!imgDupes.length && !jsonDupes.length && !imgsNotInJson.length && !jsonNotInImgs.length)
      console.log('‚úÖ –í—Å—ë —á–∏—Å—Ç–æ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ')
  }
}

compareAll()
